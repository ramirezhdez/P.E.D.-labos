#include <iostream>
#include <string>
using namespace std;

struct Usuario
{
    string Cargo;
    int id;
    string nombre;
};

Usuario solicitarInfo(void)
{
    Usuario p;
    cout << "Perfil: ";
    getline(cin, p.Cargo);
    cout << "Id de Usuario: ";
    cin >> p.id;
    cin.ignore();
    cout << "Nombre de Usuario: ";
    cin >> p.nombre;
    cin.ignore();
    return p;
}

void mostrarInfo(Usuario p)
{
    cout << "Perfil: " << p.Cargo << endl;
    cout << "Id de Usuario: " << p.id << endl;
    cout << "Nombre de Usuario: " << p.nombre << endl;
}

typedef Usuario T;
const T noValido = {"", 0};

struct nodo
{
    T dato;
    nodo *sig;
    nodo *ant;
};

class ListaDoble
{
private:
    nodo *pInicio;

public:
    ListaDoble();
    ~ListaDoble();
    void insertFront(T);
    void insertBack(T);
    void traversalForwardDirection(void);
    void traversalReverseDirection(void);
    void deleteItem(T);
    bool empty(void);
    bool searchItem(T);
    void insertAfter(T dato, T datoRef);
};

ListaDoble::ListaDoble(void)
{
    pInicio = NULL;
}

ListaDoble::~ListaDoble(void)
{
    nodo *p;
    while (pInicio)
    {
        p = pInicio;
        pInicio = pInicio->sig;
        delete p;
    }
}

void ListaDoble::insertFront(T dato)
{
    nodo *nuevo = new nodo;
    nuevo->dato = dato;
    nuevo->sig = pInicio;
    if (pInicio != NULL)
        pInicio->ant = nuevo;
    pInicio = nuevo;
}

void ListaDoble::insertBack(T dato)
{
    nodo *nuevo = new nodo;
    nuevo->dato = dato;
    if (!pInicio)
    {
        pInicio = nuevo;
        pInicio->sig = pInicio->ant = NULL;
    }
    else
    {
        nodo *saltarin = pInicio;
        while (saltarin->sig != NULL)
            saltarin = saltarin->sig;
        saltarin->sig = nuevo;
        nuevo->ant = saltarin;
        nuevo->sig = NULL;
    }
}

void ListaDoble::traversalForwardDirection(void)
{
    nodo *saltarin = pInicio;
    while (saltarin != NULL)
    {
        mostrarInfo(saltarin->dato);
        saltarin = saltarin->sig;
    }
}

void ListaDoble::traversalReverseDirection(void)
{
    if (!pInicio)
        return;
    nodo *p = pInicio;
    nodo *q = NULL;
    while (p)
    {
        q = p;
        p = p->sig;
    }
    while (q)
    {
        mostrarInfo(q->dato);
    }
}

void ListaDoble::deleteItem(T datoB)
{
    if (!pInicio)
    {
        cout << "Actualmente no hay Usuarios." << endl;
    }
    else
    {
        nodo *saltarin = pInicio;
        while (saltarin && (saltarin->dato).Cargo.compare(datoB.Cargo) != 0)
            saltarin = saltarin->sig;
        if (!saltarin)
            cout << "El Usuario no estÃ¡ en la lista" << endl;
        else
        {
            if (!saltarin->ant && saltarin->sig)
            {
                pInicio = pInicio->sig;
                pInicio->ant = NULL;
                delete saltarin;
            }
            else if (saltarin->ant && !saltarin->sig)
            {
                saltarin->ant->sig = NULL;
                delete saltarin;
            }
            else if (saltarin->ant && saltarin->sig)
            {
                saltarin->ant->sig = saltarin->sig;
                saltarin->sig->ant = saltarin->ant;
                delete saltarin;
            }
            else
            {
                pInicio = NULL;
                delete saltarin;
            }
            cout << "Usuario eliminada exitosamente!" << endl;
        }
    }
}

bool ListaDoble::empty(void)
{
    return pInicio == NULL;
}

bool ListaDoble::searchItem(T datoB)
{
    if (!pInicio)
    {
        cout << "Actualmente no hay Usuarios." << endl;
        return false;
    }
    else
    {
        nodo *saltarin = pInicio;
        while (saltarin && (saltarin->dato).Cargo.compare(datoB.Cargo) != 0)
            saltarin = saltarin->sig;
        if (!saltarin)
            return false;
        else
            return true;
    }
}

void ListaDoble::insertAfter(T dato, T datoRef)
{
    nodo *nuevo;
    nuevo = new nodo;
    nuevo->dato = dato;

    if (!pInicio)
    {
        pInicio = nuevo;
        pInicio->sig = pInicio->ant = NULL;
    }
    else
    {
        nodo *saltarin;
        saltarin = pInicio;
        while (saltarin->sig != NULL && (saltarin->dato).Cargo.compare(datoRef.Cargo) != 0)
        {
            saltarin = saltarin->sig;
        }
        nuevo->sig = saltarin->sig;
        nuevo->ant = saltarin;
        if (saltarin->sig != NULL)
            saltarin->sig->ant = nuevo;
        saltarin->sig = nuevo;
    }
}

int menu()
{
    int opcion = 0;
    cout << "\n\t\t[    REGISTRO DE USUARIOS    ]";
    cout << endl
         << "1) Agregar un Usuario." << endl;
    cout << "2) Mostrar todos los Usuarios." << endl;
    cout << "3) Eliminar Usuario." << endl;
    cout << "4) Salir." << endl;
    cout << "Opcion: ";
    cin >> opcion;
    cin.ignore();
    return opcion;
}

int main(void)
{
    ListaDoble datos;

    bool continuar = true;
    Usuario p;
    Usuario pref;
    do
    {
        switch (menu())
        {
        case 1:
            p = solicitarInfo();
            datos.insertFront(p);
            cout << "Usuario almacenado exitosamente!" << endl;
            break;
        case 2:
            datos.traversalForwardDirection();
            break;
        case 3:
            if (datos.empty())
                cout << "No hay Usuario por eliminar" << endl;
            else
            {
                p = solicitarInfo();
                datos.deleteItem(p);
            }
            break;
        case 4:
            continuar = false;
            break;
        default:
            cout << "La opcion no es valida, favor intente denuevo." << endl;
            break;
        }
    } while (continuar);

    return 0;
}
